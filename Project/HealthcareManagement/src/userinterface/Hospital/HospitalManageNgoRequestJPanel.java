/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Hospital;

import Business.Clinic.Doctor;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.OrganizationDirectory;
import Business.Supplier.Vaccine;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.NGOWorkRequest;
import Business.WorkQueue.PharmacyWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import utility.Validator;

/**
 *
 * @author shubhisharma
 */
public class HospitalManageNgoRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form HospitalManageNgoRequestJPanel
     */
    JPanel userProcessContainer;
    Enterprise enterprise;
    EcoSystem business;
    UserAccount account;
    

    public HospitalManageNgoRequestJPanel(JPanel userProcessContainer, OrganizationDirectory organizationDirectory, Enterprise enterprise, EcoSystem business, UserAccount account) {
          initComponents();
          this.userProcessContainer = userProcessContainer;
          this.enterprise = enterprise;
          this.business = business;
          this.account = account;
          
          populateRequestTable();
          populateDocType();
          populateAvailable();
    }
    
     public void populateDocType(){
          for (Doctor doctor : business.getDoctorList().getDoctorList()){
            cmbDocType.addItem(doctor.getDocName());
        }
     }

     public void populateRequestTable(){
         DefaultTableModel model = (DefaultTableModel) tblHospitalManageRequestNgo.getModel();
        
        model.setRowCount(0);
        System.out.println("populateReuestTable");
        System.out.println(business.getWorkQueue().getWorkRequestList());
        for (WorkRequest work : business.getWorkQueue().getWorkRequestList()){
           if(work instanceof NGOWorkRequest){ 
            Object[] row = new Object[5];
            row[0] = ((NGOWorkRequest) work).getNoOfDocRequired();
            row[1] = ((NGOWorkRequest) work).getRequestedDate();
            row[2] = ((NGOWorkRequest) work).getRequestedTime();
            row[3] = ((NGOWorkRequest) work).getVenue();
            row[4] = work;
            model.addRow(row);
           }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHospitalManageRequestNgo = new javax.swing.JTable();
        btnRejectReqHospital = new javax.swing.JButton();
        btnApproveReqHospital = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnDeleteReqHosp = new javax.swing.JButton();
        btnAssignToMe = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAvailableDoctor = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtNoDoctors = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        cmbDocType = new javax.swing.JComboBox<>();
        btnDelete = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel1.setText("Hospital Manage Request From NGO");

        jLabel2.setBackground(new java.awt.Color(102, 217, 255));
        jLabel2.setText("Purpose :");

        jLabel3.setText("Blood Donation Camp");

        jLabel4.setBackground(new java.awt.Color(102, 217, 255));
        jLabel4.setText("Request for Doctors");

        tblHospitalManageRequestNgo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No of Doctors required", "Date of requirement", "Time of requirement", "Venue", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblHospitalManageRequestNgo);
        if (tblHospitalManageRequestNgo.getColumnModel().getColumnCount() > 0) {
            tblHospitalManageRequestNgo.getColumnModel().getColumn(4).setResizable(false);
        }

        btnRejectReqHospital.setBackground(new java.awt.Color(102, 217, 255));
        btnRejectReqHospital.setText("Reject Request");
        btnRejectReqHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectReqHospitalActionPerformed(evt);
            }
        });

        btnApproveReqHospital.setBackground(new java.awt.Color(102, 217, 255));
        btnApproveReqHospital.setText("Approve Request");
        btnApproveReqHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveReqHospitalActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(102, 217, 255));
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnDeleteReqHosp.setBackground(new java.awt.Color(102, 217, 255));
        btnDeleteReqHosp.setText("Delete Request");
        btnDeleteReqHosp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteReqHospActionPerformed(evt);
            }
        });

        btnAssignToMe.setBackground(new java.awt.Color(102, 217, 255));
        btnAssignToMe.setText("Assign to me");
        btnAssignToMe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignToMeActionPerformed(evt);
            }
        });

        tblAvailableDoctor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Doctor Type", "No of Doctors"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblAvailableDoctor);
        if (tblAvailableDoctor.getColumnModel().getColumnCount() > 0) {
            tblAvailableDoctor.getColumnModel().getColumn(0).setResizable(false);
            tblAvailableDoctor.getColumnModel().getColumn(0).setHeaderValue("Doctor Type");
            tblAvailableDoctor.getColumnModel().getColumn(1).setResizable(false);
            tblAvailableDoctor.getColumnModel().getColumn(1).setHeaderValue("No of Doctors");
        }

        jLabel5.setText("Doctors available at Hospital");

        jLabel6.setBackground(new java.awt.Color(102, 217, 255));
        jLabel6.setText("No. of Doctors:");

        txtNoDoctors.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNoDoctorsKeyPressed(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(102, 217, 255));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        jLabel7.setBackground(new java.awt.Color(102, 217, 255));
        jLabel7.setText("Doctor Type:");

        btnDelete.setBackground(new java.awt.Color(102, 217, 255));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(244, 244, 244)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(btnAssignToMe)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(btnDeleteReqHosp)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnApproveReqHospital)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnRejectReqHospital))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 625, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 574, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnBack)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNoDoctors)
                            .addComponent(cmbDocType, 0, 88, Short.MAX_VALUE))
                        .addGap(158, 158, 158)
                        .addComponent(btnDelete))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addComponent(btnAdd))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(39, 39, 39)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4))))
                .addContainerGap(255, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRejectReqHospital)
                            .addComponent(btnApproveReqHospital)
                            .addComponent(btnDeleteReqHosp)
                            .addComponent(btnAssignToMe))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDelete)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbDocType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtNoDoctors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnAdd)
                .addGap(12, 12, 12)
                .addComponent(btnBack)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
          userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnDeleteReqHospActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteReqHospActionPerformed
        // TODO add your handling code here:
          int selectedRow= tblHospitalManageRequestNgo.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select the row to delete the request", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else{

            WorkRequest p=(WorkRequest) tblHospitalManageRequestNgo.getValueAt(selectedRow, 4);

           // s.getWorkQueue().getWorkRequestList().remove(p);
            //organization.getWorkQueue().getWorkRequestList().remove(p);
            account.getWorkQueue().getWorkRequestList().remove(p);
            business.getWorkQueue().getWorkRequestList().remove(p);
            enterprise.getWorkQueue().getWorkRequestList().remove(p);
            
            JOptionPane.showMessageDialog(null, "You have successfully deleted the request");
            populateRequestTable();
        }
    }//GEN-LAST:event_btnDeleteReqHospActionPerformed

    private void btnAssignToMeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignToMeActionPerformed
        // TODO add your handling code here:
         int selectedRow= tblHospitalManageRequestNgo.getSelectedRow();
         if(selectedRow<0){
             JOptionPane.showMessageDialog(null, "Please select the row to assign the Request", "Warning", JOptionPane.WARNING_MESSAGE);
      }
        else{
             
         NGOWorkRequest p=(NGOWorkRequest) tblHospitalManageRequestNgo.getValueAt(selectedRow, 4);

         p.setStatus("Pending");
         p.setReceiver(account);
         
        populateRequestTable();
       
         }
//        SupplierWorkRequest request= new SupplierWorkRequest();
//        request.setVaccine((Vaccine)comboVaccine.getSelectblHospitalManageRequestNgotedItem());
//        request.setQuantity(Integer.parseInt(txtquant.getText()));
//        request.setStatus("Requested");
//        request.setSender(account);
//        //organization.getWorkQueue().getWorkRequestList().add(request);
//        s.getWorkQueue().getWorkRequestList().add(request);
//        populateWorkQueueTable();
    }//GEN-LAST:event_btnAssignToMeActionPerformed

    private void btnApproveReqHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveReqHospitalActionPerformed
        // TODO add your handling code here:
        /*int selectedRow= tblHospitalManageRequestNgo.getSelectedRow();
         if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select the row to assign the account", "Warning", JOptionPane.WARNING_MESSAGE);
    }
       else{
             
        NGOWorkRequest p=(NGOWorkRequest) tblHospitalManageRequestNgo.getValueAt(selectedRow, 4);
        System.out.println("p");
        System.out.println(p.getDoctor());
             
         
          int temp=0;
           if (p.getReceiver() != null) {
                if (p.getStatus().equals("Pending")) {
                    UserAccount a = p.getSender();
                   if (business.getDoctorList().getDoctorList().size() <= 0) {
                        JOptionPane.showMessageDialog(null, "No Doctors available. Request from Supplier");
                       return;
                   }
                    for (Doctor v : business.getDoctorList().getDoctorList()) {
            p.getDoctorType().equals(v.getDocName()){
            p.getNoOfDocRequired() ---> v.getQuantity();
                  }              }
               //System.out.println(v.getDocName() + v.getQuantity());
                if (p.getNoOfDocRequired() > business.getDoctorList().getDoctorList().size()) {
                    JOptionPane.showMessageDialog(null, "No enough Doctors to supply. Wait for sometime");
                  return;
                }
                if(temp==0){
            JOptionPane.showMessageDialog(null, "No Doctors available.");
                       return; 
       }

               p.setStatus("Complete");
                JOptionPane.showMessageDialog(null, "You have successfully completed the request");
               populateRequestTable();
                //populateWorkQueueTable();
            } else {
                JOptionPane.showMessageDialog(null, "You cannot complete it two times.");
            }
       else{
        JOptionPane.showMessageDialog(null, "Please assign first");
        }*/
        int selectedRow= tblHospitalManageRequestNgo.getSelectedRow();
         if(selectedRow<0){
             JOptionPane.showMessageDialog(null, "Please select the row to assign the account", "Warning", JOptionPane.WARNING_MESSAGE);
      }
        else{
             
         NGOWorkRequest p=(NGOWorkRequest) tblHospitalManageRequestNgo.getValueAt(selectedRow, 4);
         
        int temp=0;
        if(p.getReceiver()!= null){
         if (p.getStatus().equalsIgnoreCase("Pending")) {
         UserAccount a =p.getSender();
         if(business.getDoctorList().getDoctorList().size()<= 0){
             JOptionPane.showMessageDialog(null, "No Doctors available.");
            return;
         }
        for (Doctor v : business.getDoctorList().getDoctorList()) {
        //if(p.getDocName().equals(v.getDocName())){
            if(v.getQuantity()- p.getNoOfDocRequired()<0){
                JOptionPane.showMessageDialog(null, "Not enough Doctors available. Wait for sometime");
            return;
            }
            temp=1;
            v.setQuantity(v.getQuantity()- p.getNoOfDocRequired());
        break;
        //}
       
    }
         if(temp==0){
            JOptionPane.showMessageDialog(null, "No Doctors available");
                       return; 
        }
        
         p.setStatus("Approved");
          JOptionPane.showMessageDialog(null, "You have successfully completed the request");
          populateAvailable();
          populateRequestTable();
     } else if(p.getStatus().equalsIgnoreCase("Rejected")){
         JOptionPane.showMessageDialog(null, "You cannot approve the rejected request.");
         
     }else {
                JOptionPane.showMessageDialog(null, "Cannot Approve the request 2 times.");
            }
        }
        else{
        JOptionPane.showMessageDialog(null, "Please assign first");
        }
        
         }
    }//GEN-LAST:event_btnApproveReqHospitalActionPerformed
  public void populateAvailable() {
        DefaultTableModel model = (DefaultTableModel) tblAvailableDoctor.getModel();

        model.setRowCount(0);

        for (Doctor doctor : business.getDoctorList().getDoctorList()) {

            Object[] row = new Object[2];
            row[0] = doctor;
            row[1] = doctor.getQuantity();
            model.addRow(row);

        }
        
    }
    
    private void btnRejectReqHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectReqHospitalActionPerformed
        // TODO add your handling code here:
         int selectedRow= tblHospitalManageRequestNgo.getSelectedRow();
         if(selectedRow<0){
             JOptionPane.showMessageDialog(null, "Please select the row to reject the Request", "Warning", JOptionPane.WARNING_MESSAGE);
      }
        else{
             
         NGOWorkRequest p=(NGOWorkRequest) tblHospitalManageRequestNgo.getValueAt(selectedRow, 4);
         if(p.getStatus().equalsIgnoreCase("Approved")){
                 JOptionPane.showMessageDialog(null, "Cannot Reject the Approved request", "Warning", JOptionPane.WARNING_MESSAGE);
             }else if(p.getStatus().equalsIgnoreCase("Rejected")){
                 JOptionPane.showMessageDialog(null, "Cannot Reject the request 2 times", "Warning", JOptionPane.WARNING_MESSAGE);
             }else{
                if (p.getStatus().equalsIgnoreCase("Pending")) {
                    p.setStatus("Rejected");
                    p.setReceiver(account);
                }else{
                     JOptionPane.showMessageDialog(null, "Please assign first");
                }
             }
        populateRequestTable();
       
         }
    }//GEN-LAST:event_btnRejectReqHospitalActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        if(!txtNoDoctors.getText().equals("")){
        int quant = Integer.parseInt(txtNoDoctors.getText());
        String v =  (String) cmbDocType.getSelectedItem();
        int temp = 0;
        for (Doctor doctor : business.getDoctorList().getDoctorList()) {
            if (v.equals(doctor.getDocName())) {
                temp = 1;
                doctor.setQuantity(doctor.getQuantity() + quant);
            }
        }

        if (temp == 0) {
            Doctor doc = business.getDoctorList().addDoctor();
            doc.setQuantity(quant);
            doc.setDocName(v);
            NGOWorkRequest nGOWorkRequest = new NGOWorkRequest();
            
            nGOWorkRequest.setDoctor(doc);
            //nGOWorkRequest.setDocName(v);
            
        }
        populateAvailable();
      }else{
             JOptionPane.showMessageDialog(null, "Enter value", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
               int selectedRow= tblAvailableDoctor.getSelectedRow();
         if(selectedRow<0){
             JOptionPane.showMessageDialog(null, "Please select the row to delete the doctor details", "Warning", JOptionPane.WARNING_MESSAGE);
      }
        else{
             
         Doctor p= (Doctor) tblAvailableDoctor.getValueAt(selectedRow, 0);

         business.getDoctorList().removeDoctor(p);
          JOptionPane.showMessageDialog(null, "You have successfully deleted the doctor details");
        populateAvailable();
         }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtNoDoctorsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNoDoctorsKeyPressed
        // TODO add your handling code here:
        Validator.onlyInteger(evt, txtNoDoctors);
    }//GEN-LAST:event_txtNoDoctorsKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnApproveReqHospital;
    private javax.swing.JButton btnAssignToMe;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteReqHosp;
    private javax.swing.JButton btnRejectReqHospital;
    private javax.swing.JComboBox<String> cmbDocType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblAvailableDoctor;
    private javax.swing.JTable tblHospitalManageRequestNgo;
    private javax.swing.JTextField txtNoDoctors;
    // End of variables declaration//GEN-END:variables
}
